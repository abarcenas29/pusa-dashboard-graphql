input addUserDisplayListInput {
  email: String!
  first_name: String!
  last_name: String!
  clientMutationId: String
}

type addUserDisplayListPayload {
  userConnection: userConnectionConnection
  clientMutationId: String
}

input addUserInput {
  email: String!
  first_name: String!
  last_name: String!
  clientMutationId: String
}

type addUserPayload {
  userEdge: userConnectionEdge
  store: UsersType
  clientMutationId: String
}

type Mutation {
  addUser(input: addUserInput!): addUserPayload
  addUserDisplayList(input: addUserDisplayListInput!): addUserDisplayListPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  findUser(id: ID!): userConnectionEdge
  listUser: UsersType
}

"""A connection to a list of items."""
type userConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [userConnectionEdge]
}

"""An edge in a connection."""
type userConnectionEdge {
  """The item at the end of the edge"""
  node: UserType

  """A cursor for use in pagination"""
  cursor: String!
}

type UsersType {
  """The ID of an object"""
  id: ID!
  userConnection(after: String, first: Int, before: String, last: Int): userConnectionConnection
}

type UserType {
  id: ID!
  email: String!
  first_name: String!
  last_name: String!
}
